generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    createDate       DateTime           @default(now())
    name             String
    email            String             @unique
    password         String
    phoneNumber      String?
    role             Role
    accounts         Account[]
    sessions         Session[]
    LeadForm         LeadForm[]
    LeadFormActivity LeadFormActivity[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LeadForm {
    id                  String             @id @default(cuid())
    createDate          DateTime           @default(now())
    updateDate          DateTime           @updatedAt
    dateReceived        DateTime
    lastDateSent        DateTime?
    isEventConfirmed    Boolean            @default(false)
    isCorporate         Boolean            @default(false)
    isLiveIn            Boolean            @default(false)
    salesAccountManager User               @relation(fields: [userId], references: [id])
    company             Organization?      @relation(fields: [organizationId], references: [id])
    contact             Contact?           @relation(fields: [contactId], references: [id])
    eventType           EventType?         @relation(fields: [eventTypeId], references: [id])
    eventDetails        EventDetails[]
    roomDetails         RoomDetails?       @relation(fields: [roomDetailsId], references: [id])
    otherDetails        OtherDetails?      @relation(fields: [otherDetailsId], references: [id])
    activity            LeadFormActivity[]
    userId              String
    organizationId      String?
    eventTypeId         String?
    roomDetailsId       String?
    otherDetailsId      String?
    contactId           String?
}

model EventType {
    id       String     @id @default(cuid())
    name     String
    LeadForm LeadForm[]
}

model EventDetails {
    id             String        @id @default(cuid())
    createDate     DateTime      @default(now())
    updateDate     DateTime      @updatedAt
    date           DateTime
    optionalDate   DateTime?
    startTime      DateTime?
    endTime        DateTime?
    pax            Int?
    remarks        String?
    roomSetup      RoomSetup?    @relation(fields: [roomSetupId], references: [id])
    mealReq        MealReq?      @relation(fields: [mealReqId], references: [id])
    functionRoom   FunctionRoom? @relation(fields: [functionRoomId], references: [id])
    LeadForm       LeadForm?     @relation(fields: [leadFormId], references: [id])
    leadFormId     String?
    roomSetupId    String?
    mealReqId      String?
    functionRoomId String?
}

model FunctionRoom {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model RoomSetup {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model MealReq {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model RoomDetails {
    id            String     @id @default(cuid())
    numberOfRooms Int?
    type          String?
    arrivalDate   DateTime?
    departureDate DateTime?
    LeadForm      LeadForm[]
}

model OtherDetails {
    id                       String         @id @default(cuid())
    banquetsBudget           Int?
    roomsBudget              Int?
    otherHotelsConsideration Organization[]
    rate                     Int?
    rateType                 RateType?      @relation(fields: [rateTypeId], references: [id])
    venueDecisionDate        DateTime?
    LeadForm                 LeadForm[]
    rateTypeId               String?
}

model RateType {
    id           String         @id @default(cuid())
    name         String         @unique
    OtherDetails OtherDetails[]
}

model LeadFormActivity {
    id             String    @id @default(cuid())
    updateDate     DateTime  @updatedAt
    date           DateTime?
    updatedBy      User?     @relation(fields: [userId], references: [id])
    clientFeedback String?
    nextTraceDate  String?
    userId         String?
    LeadForm       LeadForm? @relation(fields: [leadFormId], references: [id])
    leadFormId     String?
}

model Organization {
    id             String        @id @default(cuid())
    name           String        @unique
    phoneNumber    String?
    address        String?
    OtherDetails   OtherDetails? @relation(fields: [otherDetailsId], references: [id])
    otherDetailsId String?
    LeadForm       LeadForm[]
}

model Contact {
    id          String     @id @default(cuid())
    firstName   String
    email       String
    lastName    String?
    phoneNumber String?
    LeadForm    LeadForm[]
}

enum Role {
    user
    admin
    salesManager
}

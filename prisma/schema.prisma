generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String             @id @default(cuid())
    createDate          DateTime           @default(now())
    name                String
    email               String             @unique
    password            String
    phoneNumber         String?
    role                Role
    accounts            Account[]
    sessions            Session[]
    LeadFormActivity    LeadFormActivity[]
    salesAccountManager LeadForm[]         @relation(name: "salesAccountManager")
    updatedBy           LeadForm[]         @relation(name: "updatedBy")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LeadForm {
    id                       String             @id @default(cuid())
    createDate               DateTime           @default(now())
    updateDate               DateTime           @updatedAt
    updatedBy                User?              @relation(name: "updatedBy", fields: [updatedById], references: [id])
    leadType                 LeadType           @relation(fields: [leadTypeId], references: [id])
    dateReceived             DateTime
    lastDateSent             DateTime?
    isEventConfirmed         Boolean            @default(false)
    isCorporate              Boolean            @default(false)
    isLiveIn                 Boolean            @default(false)
    salesAccountManager      User               @relation(fields: [salesAccountManagerId], references: [id], name: "salesAccountManager")
    onSiteDate               DateTime?
    onSiteDateOptional       DateTime?
    startDate                DateTime
    endDate                  DateTime
    eventLengthInDays        Int
    company                  Organization?      @relation(name: "company", fields: [companyId], references: [id])
    contact                  Contact?           @relation(fields: [contactId], references: [id])
    eventType                EventType?         @relation(fields: [eventTypeId], references: [id])
    eventTypeOther           String?
    roomTotal                Int?
    roomType                 String?
    roomArrivalDate          DateTime?
    roomDepartureDate        DateTime?
    eventDetails             EventDetails[]
    activities               LeadFormActivity[]
    banquetsBudget           Int?
    roomsBudget              Int?
    otherHotelConsiderations Organization[]     @relation(name: "otherHotelConsiderations")
    rate                     Int?
    rateType                 RateType?          @relation(fields: [rateTypeId], references: [id])
    venueDecisionDate        DateTime?
    salesAccountManagerId    String
    eventTypeId              String?
    contactId                String?
    leadTypeId               String
    rateTypeId               String?
    companyId                String?
    updatedById              String?
}

model LeadType {
    id       String     @id @default(cuid())
    name     String     @unique
    LeadForm LeadForm[]
}

model EventType {
    id       String     @id @default(cuid())
    name     String
    activity String     @unique
    LeadForm LeadForm[]
}

model EventDetails {
    id             String        @id @default(cuid())
    date           DateTime
    startTime      String?
    endTime        String?
    pax            Int?
    remarks        String?
    roomSetup      RoomSetup?    @relation(fields: [roomSetupId], references: [id])
    mealReq        MealReq?      @relation(fields: [mealReqId], references: [id])
    functionRoom   FunctionRoom? @relation(fields: [functionRoomId], references: [id])
    LeadForm       LeadForm?     @relation(fields: [leadFormId], references: [id])
    leadFormId     String?
    roomSetupId    String?
    mealReqId      String?
    functionRoomId String?
}

model FunctionRoom {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model RoomSetup {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model MealReq {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model RateType {
    id       String     @id @default(cuid())
    name     String     @unique
    LeadForm LeadForm[]
}

model LeadFormActivity {
    id             String    @id @default(cuid())
    updateDate     DateTime  @updatedAt
    date           DateTime
    updatedBy      User      @relation(fields: [updatedById], references: [id])
    clientFeedback String?
    nextTraceDate  DateTime?
    updatedById    String
    LeadForm       LeadForm? @relation(fields: [leadFormId], references: [id])
    leadFormId     String?
}

model Organization {
    id                       String     @id @default(cuid())
    name                     String     @unique
    phoneNumber              String?
    address1                 String?
    address2                 String?
    company                  LeadForm[] @relation(name: "company")
    otherHotelConsiderations LeadForm[] @relation(name: "otherHotelConsiderations")
}

model Contact {
    id          String     @id @default(cuid())
    firstName   String
    email       String     @unique
    lastName    String?
    phoneNumber String?
    LeadForm    LeadForm[]
}

enum Role {
    user
    admin
    salesManager
}

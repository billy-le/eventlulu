generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String             @id @default(cuid())
    createDate          DateTime           @default(now())
    name                String
    email               String             @unique
    password            String
    phoneNumber         String?
    roles               Role[]             @default(value: [user])
    accounts            Account[]
    salesAccountManager LeadForm[]         @relation("salesAccountManager")
    updatedBy           LeadForm[]         @relation("updatedBy")
    LeadFormActivity    LeadFormActivity[]
    sessions            Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LeadForm {
    id                       String             @id @default(cuid())
    createDate               DateTime           @default(now())
    updateDate               DateTime           @updatedAt
    dateReceived             DateTime
    lastDateSent             DateTime?
    status                   EventStatus        @default(tentative)
    isCorporate              Boolean            @default(false)
    isLiveIn                 Boolean            @default(false)
    onSiteDate               DateTime?
    startDate                DateTime
    endDate                  DateTime
    eventLengthInDays        Int
    eventTypeOther           String?
    roomTotal                Int?
    roomType                 String?
    roomArrivalDate          DateTime?
    roomDepartureDate        DateTime?
    banquetsBudget           Int?
    roomsBudget              Int?
    otherHotelConsiderations String?
    venueDecisionDate        DateTime?
    salesAccountManagerId    String
    eventTypeId              String?
    contactId                String
    leadTypeId               String
    rateTypeId               String?
    companyId                String?
    updatedById              String?
    eventDetails             EventDetails[]
    company                  Organization?      @relation("company", fields: [companyId], references: [id])
    contact                  Contact            @relation(fields: [contactId], references: [id])
    eventType                EventType?         @relation(fields: [eventTypeId], references: [id])
    leadType                 LeadType           @relation(fields: [leadTypeId], references: [id])
    rateType                 RateType?          @relation(fields: [rateTypeId], references: [id])
    salesAccountManager      User               @relation("salesAccountManager", fields: [salesAccountManagerId], references: [id])
    updatedBy                User?              @relation("updatedBy", fields: [updatedById], references: [id])
    activities               LeadFormActivity[]
    inclusions               Inclusion[]        @relation("InclusionToLeadForm")
}

model LeadType {
    id       String     @id @default(cuid())
    name     String     @unique
    LeadForm LeadForm[]
}

model EventType {
    id       String     @id @default(cuid())
    name     String
    activity String     @unique
    LeadForm LeadForm[]
}

model EventDetails {
    id             String        @id @default(cuid())
    date           DateTime
    startTime      String?
    endTime        String?
    pax            Int?
    remarks        String?
    rate           Int?
    leadFormId     String?
    roomSetupId    String?
    functionRoomId String?
    functionRoom   FunctionRoom? @relation(fields: [functionRoomId], references: [id])
    LeadForm       LeadForm?     @relation(fields: [leadFormId], references: [id])
    roomSetup      RoomSetup?    @relation(fields: [roomSetupId], references: [id])
    mealReqs       MealReq[]     @relation("EventDetailsToMealReq")
}

model FunctionRoom {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model RoomSetup {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[]
}

model MealReq {
    id           String         @id @default(cuid())
    name         String         @unique
    EventDetails EventDetails[] @relation("EventDetailsToMealReq")
}

model RateType {
    id       String     @id @default(cuid())
    name     String     @unique
    LeadForm LeadForm[]
}

model Inclusion {
    id        String     @id @default(cuid())
    name      String     @unique
    preselect Boolean    @default(false)
    LeadForms LeadForm[] @relation("InclusionToLeadForm")
}

model LeadFormActivity {
    id             String    @id @default(cuid())
    updateDate     DateTime  @updatedAt
    date           DateTime
    clientFeedback String?
    nextTraceDate  DateTime?
    updatedById    String
    leadFormId     String?
    LeadForm       LeadForm? @relation(fields: [leadFormId], references: [id])
    updatedBy      User      @relation(fields: [updatedById], references: [id])
}

model Organization {
    id          String     @id @default(cuid())
    name        String     @unique
    phoneNumber String?
    address1    String?
    address2    String?
    city        String?
    province    String?
    postalCode  String?
    company     LeadForm[] @relation("company")
}

model Contact {
    id           String     @id @default(cuid())
    firstName    String
    email        String     @unique
    title        String?
    lastName     String?
    phoneNumber  String?
    mobileNumber String?
    LeadForm     LeadForm[]
}

enum EventStatus {
    tentative
    lost
    confirmed
}

enum Role {
    user
    admin
    salesManager
}
